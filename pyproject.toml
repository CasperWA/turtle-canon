[build-system]
requires = ["hatchling~=1.21"]
build-backend = "hatchling.build"

[project]
name = "turtle-canon"
authors = [
    {name = "Casper Welzel Andersen", email = "casper.w.andersen@sintef.no"},
]
maintainers = [
    {name = "Casper Welzel Andersen", email = "casper.w.andersen@sintef.no"},
    {name = "Tor S. Haugland", email = "tor.haugland@sintef.no"},
]
description = "A tool for canonizing Turtle (`.ttl`) ontology files."
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["ontology", "turtle"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Software Development :: Pre-processors",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Version Control",
    "Topic :: Text Processing",
    "Topic :: Utilities",
]
requires-python = "~=3.10"
dynamic = ["version"]

dependencies = [
    "rdflib>=6.0.1,<8",
]

[project.optional-dependencies]
docs = [
    "mike~=2.0",
    "mkdocs~=1.5",
    "mkdocs-awesome-pages-plugin~=2.9",
    "mkdocs-material~=9.5",
    "mkdocs-minify-plugin~=0.8.0",
    "mkdocstrings[python]~=0.28.0",
]
dev = [
    "pre-commit~=4.0",
    "pytest~=8.0",
    "pytest-cov~=6.0",
    "turtle-canon[docs]",
]

[project.urls]
Home = "https://CasperWA.github.io/turtle-canon"
Documentation = "https://CasperWA.github.io/turtle-canon"
Source = "https://github.com/CasperWA/turtle-canon"
"Issue Tracker" = "https://github.com/CasperWA/turtle-canon/issues"
Changelog = "https://github.com/CasperWA/turtle-canon/blob/main/CHANGELOG.md"
Package = "https://pypi.org/project/turtle-canon"

[project.scripts]
turtle-canon = "turtle_canon.cli.cmd_turtle_canon:main"

[tool.hatch.version]
path = "turtle_canon/__init__.py"

[tool.black]
line-length = 88
target-version = ['py310']

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-rs --cov=turtle_canon --cov-report=term-missing:skip-covered --no-cov-on-fail"
filterwarnings = [
    # Treat all warnings as errors
    "error",
]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
scripts_are_modules = true
warn_unused_configs = true
show_error_codes = true
allow_redefinition = true
check_untyped_defs = true

[tool.ruff.lint]
extend-select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "B",  # flake8-bugbear
  "BLE",  # flake8-blind-except
  "I",  # isort
  "ARG",  # flake8-unused-arguments
  "C4",  # flake8-comprehensions
  "ICN",  # flake8-import-conventions
  "G",  # flake8-logging-format
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "T20",  # flake8-print
  "YTT",  # flake8-2020
  "EXE",  # flake8-executable
  "PYI",  # flake8-pyi
]
ignore = [
  "PLR",  # Design related pylint codes
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "BLE",  # flake8-blind-except
    "T20",  # flake8-print
]
